Сделать класс Node, который будет содержать в себе:

атрибуты:
value
свойства:
next
методы:
__str__
__repr__
is_valid
Сделать DoubleLinkedNode наследуясь от класса Node

В конструкторе DoubleLinkedNode определить дополнительный атрибут prev, хранящий в себе ссылку на предыдущий узел.
Обязательно вызвать конструктор базового класса тем самым дополняя функциональность базового класса, сохраняя его логику.
Атрибут экземпляра prev сделать свойством prev.
Определить для него getter и setter с проверками аналогичными свойству next в классе Node.
Для DoubleLinkedNode подумать какой из методов __repr__, метод __str__ наследовать, а какой перегрузить.



Двусвязный список на основе односвязного списка.

Односвязный список LinkedList должен быть унаследован он абстрактного типа MutableSequence из модуля collections.abc.

В односвязном списке должны быть реализованы следующие методы:

__getitem__
__setitem__
__delitem__
__len__
__str__
__repr__
insert
append
Все атрибуты должны быть инкапсулированы.
То есть быть либо private или protected по вашему выбору.

Двусвязный список DoubleLinkedList должен наследоваться от LinkedList.
Для экземпляров данного класса должны работать все методы базового класса.

Необязательно все эти методы должны быть перегружены. По максимуму используйте наследование, если поведение списков в контексте реализации указанных метод схоже.
С точки зрения наследования по минимуму перегружайте методы.
При необходимости рефакторите базовый класс, чтобы локализовать части кода во вспомогательные функции,
которые имеют различное поведение в связном и двусвязном списках.

Стремитесь к минимизации кода в дочернем классе.

Дополнительные задания:
Эти задания приветствуются, но оцениваться не будут. Будут вам плюсиком в карму.

Реализовать следующие методы:

__iter__

__contains__

__reversed__

count

pop

extend

remove

index